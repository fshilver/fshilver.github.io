<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>command on 메모장</title><link>https://hsyang.net/tags/command/</link><description>Recent content in command on 메모장</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Sat, 23 Apr 2022 21:59:26 +0900</lastBuildDate><atom:link href="https://hsyang.net/tags/command/index.xml" rel="self" type="application/rss+xml"/><item><title>[명령어] column</title><link>https://hsyang.net/posts/cli-column/</link><pubDate>Sat, 23 Apr 2022 21:59:26 +0900</pubDate><guid>https://hsyang.net/posts/cli-column/</guid><description>리눅스 column 명령어 예제 원본 데이터 ~$ cat data PID,USER,PR,NI,VIRT,RES,SHR,S,%CPU,%MEM,TIME+,COMMAND 7384,hsyang,20,0,4008576,223168,52452,S,0.7,0.5,63:11.74,gnome-shell 7586,hsyang,20,0,654168,23964,6016,S,0.3,0.0,89:41.40,gsd-color 17390,root,-51,0,0,0,0,S,0.3,0.0,2:58.97,irq/66-nvidia 20272,root,20,0,16.9g,2.9g,526156,S,0.3,6.1,4:54.15,gunicorn column 명령어로 포맷팅 ~$ cat data | column -s, -t PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 7384 hsyang 20 0 4008576 223168 52452 S 0.7 0.5 63:11.74 gnome-shell 7586 hsyang 20 0 654168 23964 6016 S 0.3</description></item><item><title>[명령어] rpm</title><link>https://hsyang.net/posts/rpm/</link><pubDate>Mon, 24 Jan 2022 22:49:28 +0900</pubDate><guid>https://hsyang.net/posts/rpm/</guid><description>모든 옵션에 -p 를 붙여서 아직 설치되지 않는 rpm 파일에 대한 정보를 알 수 있다. 예를 들면 이런 식이다. ~$ rpm -ql docker-ce ~$ rpm -qlp docker-ce-20.10.12-3.el7.x86_64.rpm ~$ rpm -qi docker-ce ~$ rpm -qip docker-ce-20.10.12-3.el7.x86_64.rpm rpm 설치 ~$ rpm -ivh docker-ce-20.10.12-3.el7.x86_64.rpm rpm 버전 업그</description></item><item><title>[명령어] iptables</title><link>https://hsyang.net/posts/iptables/</link><pubDate>Mon, 10 Jan 2022 23:27:03 +0900</pubDate><guid>https://hsyang.net/posts/iptables/</guid><description>기본 개념 순서대로 규칙이 적용되기 때문에 설정 순서가 중요하다. 기본적으로 INPUT, OUTPUT, FORWAD Chain이 존재한다. 각 Chain에 대한 기본 정책 설정 ~$ sudo iptables -P INPUT DROP ~$ sudo</description></item><item><title>[명령어] dcmdump</title><link>https://hsyang.net/posts/cli-dcmdump/</link><pubDate>Wed, 29 Dec 2021 01:17:41 +0900</pubDate><guid>https://hsyang.net/posts/cli-dcmdump/</guid><description>DCMTK 버전: 3.6.5 DICOM 파일명 : sample.dcm 모든 태그 출력 ~$ dcmdump sample.dcm # Dicom-File-Format # Dicom-Meta-Information-Header # Used TransferSyntax: Little Endian Explicit (0002,0000) UL 216 # 4, 1 FileMetaInformationGroupLength (0002,0001) OB 00\01 # 2, 1 FileMetaInformationVersion (0002,0002) UI =BreastTomosynthesisImageStorage # 30, 1 MediaStorageSOPClassUID (0002,0003) UI [1.2.840.113845.13.6533.1581875921.128629056237121] # 50, 1 MediaStorageSOPInstanceUID (0002,0010) UI =JPEGLossless:Non-hierarchical-1stOrderPrediction # 22, 1 TransferSyntaxUID (0002,0012) UI [1.2.276.0.7230010.3.0.3.6.5] # 28,</description></item><item><title>[명령어] xxd (파일 hex/binary view)</title><link>https://hsyang.net/posts/xxd/</link><pubDate>Sun, 12 Dec 2021 22:44:32 +0900</pubDate><guid>https://hsyang.net/posts/xxd/</guid><description>xxd는 파일의 내용을 컴퓨터에 저장된, 있는 그대로의 데이터를 보여주는 명령어다. 이 글에서는 centos 설치 후 생성되는 파일을 예제로 사용했다. (/root/anaconda-ks.cfg) 출력 No option ~$ xxd /root/anaconda-ks.cfg |</description></item><item><title>[명령어] git branch</title><link>https://hsyang.net/posts/git-branch/</link><pubDate>Mon, 29 Nov 2021 23:22:06 +0900</pubDate><guid>https://hsyang.net/posts/git-branch/</guid><description>생성 현재 commit에서 branch 생성 ~$ git checkout -b &amp;lt;new branch&amp;gt; # 예제 # branch 이름 : my-branch ~$ git checkout -b my-branch 특정 tag에서 branch 생성 ~$ git checkout -b &amp;lt;new branch&amp;gt; &amp;lt;tag&amp;gt; # 예제 # branch 이름 : my-branch # tag : 1.1.0 ~$ git checkout -b my-branch</description></item><item><title>[명령어] tcpdump</title><link>https://hsyang.net/posts/tcpdump/</link><pubDate>Mon, 23 Aug 2021 18:21:37 +0900</pubDate><guid>https://hsyang.net/posts/tcpdump/</guid><description>tcpdump는 네트워크 패킷을 캡쳐할 수 있는 명령어로 여러가지 상황에서 활용할 수 있다. HTTP API 통신하는 app이 실제로 어떤 내용을 주고 받는지 확인하고 싶을 때</description></item><item><title>[명령어] git commit</title><link>https://hsyang.net/posts/git-commit/</link><pubDate>Sun, 15 Nov 2020 23:18:21 +0900</pubDate><guid>https://hsyang.net/posts/git-commit/</guid><description>commit 취소 # 최종 커밋을 취소. 워킹트리는 보존됨. (커밋은 했으나 push하지 않은 경우 사용) ~$ git reset HEAD^ # 마지막 2개의 커밋을 취소. 워킹트리는 보존됨. ~$ git reset</description></item><item><title>[명령어] git tag</title><link>https://hsyang.net/posts/git-tag/</link><pubDate>Sat, 14 Nov 2020 16:39:51 +0900</pubDate><guid>https://hsyang.net/posts/git-tag/</guid><description>tag 추가 # 가장 최신 커밋에 Tag 추가 ~$ git tag v1.5.1.2 # 특정 커밋에 Tag 추가 ~$ git tag v1.5.1.2 446e2c10555ccbaa5cd4006b250d7d2135dbc2b0 tag 삭제 # 로컬 Repo에서 삭제 ~$ git tag -d 1.7.2 # 원격 Repo에서 삭제 ~$ git push origin :tags/1.7.2 tag 덮어</description></item><item><title>[명령어] git submodule</title><link>https://hsyang.net/posts/git-submodule/</link><pubDate>Sat, 14 Nov 2020 16:27:53 +0900</pubDate><guid>https://hsyang.net/posts/git-submodule/</guid><description>submodule 추가 # submodule 목록 보기 ~$ git submodule # submodule 추가 ~$ git submodule add &amp;lt;remote repository&amp;gt; &amp;lt;local dir&amp;gt; submodule 업데이트 # git 버전 1.8 이전 ~$ cd project # git repository ~$ cd sub1 # assume sub1 is submodule ~$ git pull # get latest sub1 ~$ cd .. ~$ git add sub1 ~$ git commit -m &amp;#39;update submodule&amp;#39;</description></item></channel></rss>