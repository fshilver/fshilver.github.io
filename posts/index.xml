<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>포스팅 on 메모장</title><link>https://hsyang.net/posts/</link><description>Recent content in 포스팅 on 메모장</description><generator>Hugo -- gohugo.io</generator><language>ko</language><atom:link href="https://hsyang.net/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>[명령어] ip</title><link>https://hsyang.net/posts/cli-ip/</link><pubDate>Tue, 10 May 2022 01:19:45 +0900</pubDate><guid>https://hsyang.net/posts/cli-ip/</guid><description>네트워크 인터페이스 목록 ~$ ip link 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: ens160: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000 link/ether 00:0c:29:d5:de:3f brd ff:ff:ff:ff:ff:ff 네트워크 인터페이스 링크 업/다운 ~$ ip link</description></item><item><title>[명령어] column</title><link>https://hsyang.net/posts/cli-column/</link><pubDate>Sat, 23 Apr 2022 21:59:26 +0900</pubDate><guid>https://hsyang.net/posts/cli-column/</guid><description>리눅스 column 명령어 예제 원본 데이터 ~$ cat data PID,USER,PR,NI,VIRT,RES,SHR,S,%CPU,%MEM,TIME+,COMMAND 7384,hsyang,20,0,4008576,223168,52452,S,0.7,0.5,63:11.74,gnome-shell 7586,hsyang,20,0,654168,23964,6016,S,0.3,0.0,89:41.40,gsd-color 17390,root,-51,0,0,0,0,S,0.3,0.0,2:58.97,irq/66-nvidia 20272,root,20,0,16.9g,2.9g,526156,S,0.3,6.1,4:54.15,gunicorn column 명령어로 포맷팅 ~$ cat data | column -s, -t PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 7384 hsyang 20 0 4008576 223168 52452 S 0.7 0.5 63:11.74 gnome-shell 7586 hsyang 20 0 654168 23964 6016 S 0.3</description></item><item><title>[GO] cgo - GO에서 C언어로 작성된 코드 사용하기</title><link>https://hsyang.net/posts/golang-cgo/</link><pubDate>Sun, 10 Apr 2022 20:04:04 +0900</pubDate><guid>https://hsyang.net/posts/golang-cgo/</guid><description>프롤로그 GO에서 왜 C언어로 작성된 코드를 사용할까? 이유는 여러가지가 있겠지만 보통 C 언어로 작성된 라이브러리를 그대로 GO에서 사용하기 위해 사용하는 경우</description></item><item><title>[GO] Integer 타입 최소/최대값</title><link>https://hsyang.net/posts/golang-min-max-value-of-integer-types/</link><pubDate>Mon, 04 Apr 2022 23:39:48 +0900</pubDate><guid>https://hsyang.net/posts/golang-min-max-value-of-integer-types/</guid><description>GO playground : https://go.dev/play/p/UoBkR10QmNc Official Reference : https://go.dev/ref/spec#Numeric_types package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math&amp;#34; ) func main() { fmt.Printf(&amp;#34;int : %d ~ %d\n&amp;#34;, math.MinInt, math.MaxInt) fmt.Printf(&amp;#34;int8 : %d ~ %d\n&amp;#34;, math.MinInt8, math.MaxInt8) fmt.Printf(&amp;#34;int16 : %d ~ %d\n&amp;#34;, math.MinInt16, math.MaxInt16) fmt.Printf(&amp;#34;int32 : %d ~ %d\n&amp;#34;, math.MinInt32, math.MaxInt32) fmt.Printf(&amp;#34;int64 : %d ~ %d\n&amp;#34;, math.MinInt64, math.MaxInt64) fmt.Printf(&amp;#34;uint : 0 ~ %d\n&amp;#34;, uint64(math.MaxUint)) fmt.Printf(&amp;#34;uint8 : 0 ~ %d\n&amp;#34;, math.MaxUint8) fmt.Printf(&amp;#34;uint16 : 0 ~ %d\n&amp;#34;,</description></item><item><title>AWS CLI [CloudFront] - Cache 삭제 방법</title><link>https://hsyang.net/posts/aws-cloudfront/</link><pubDate>Mon, 28 Feb 2022 00:43:56 +0900</pubDate><guid>https://hsyang.net/posts/aws-cloudfront/</guid><description>S3에 원본 파일을 업데이트 할 경우, 일정 시간이 지나야만 CloudFront에 반영된다. (default 1시간) 이는 CloudFront Caching 알고리즘에 의한 동작이다. 만약, S3 원본 업데</description></item><item><title>DEB(APT) Repository 만들기</title><link>https://hsyang.net/posts/how-to-create-deb-repository/</link><pubDate>Sun, 27 Feb 2022 14:08:39 +0900</pubDate><guid>https://hsyang.net/posts/how-to-create-deb-repository/</guid><description>일단 아무런 설명 없이 그대로 따라서 만들어 보자. 자세한 내용은 뒤에서 설명한다. APT Repository 생성 아래와 같은 폴더 구조를 만든다. . ├── deb │ ├── dists │ │ └── stable │</description></item><item><title>GPG 공개키/개인키 쌍 만들기</title><link>https://hsyang.net/posts/gpg/</link><pubDate>Sun, 27 Feb 2022 12:30:50 +0900</pubDate><guid>https://hsyang.net/posts/gpg/</guid><description>GPG 버전 2.2.19를 기준으로 작성한 문서다. Ubuntu 20.04에 포함된 버전 CentOS 7은 2.0.22이 설치되어 있고, 명령 실행 결과와 옵션이 약간 다르다. Key Pair 생성</description></item><item><title>RPM(YUM) Repository 만들기</title><link>https://hsyang.net/posts/how-to-create-rpm-repository/</link><pubDate>Sun, 27 Feb 2022 11:30:10 +0900</pubDate><guid>https://hsyang.net/posts/how-to-create-rpm-repository/</guid><description>CentOS 7에서 RPM(YUM) Repository를 구성하는 방법에 대해 알아보자. RPM Repository createrepo rpm 설치 ~$ sudo yum install -y createrepo repository로 사용할 폴더 생성 ~$ mkdir /repo reposit</description></item><item><title>CentOS/Redhat 7 - ftp 서버 업로드 전용 계정 생성 방법</title><link>https://hsyang.net/posts/vsftpd-upload-only-account/</link><pubDate>Sun, 20 Feb 2022 23:28:11 +0900</pubDate><guid>https://hsyang.net/posts/vsftpd-upload-only-account/</guid><description>업로드 전용 계정 만들기 ssh 접속은 허용하지 않고 오로지 sftp 접근만 가능하도록 설정 ${HOME}/upload 폴더에만 파일 업로드 가능. ${HOME} 에는 업로드 불가 ${HOME} 상위 폴더로 이동 불가. 즉, 타계</description></item><item><title>Docker</title><link>https://hsyang.net/posts/docker/</link><pubDate>Tue, 15 Feb 2022 06:47:01 +0900</pubDate><guid>https://hsyang.net/posts/docker/</guid><description>docker-ce 20.10.12 기준으로 작성된 내용 설치 CentOS 7 ~$ yum install yum-utils device-mapper-persistent-data lvm2 ~$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo ~$ yum install docker-ce ~$ systemctl enable --now docker 설정 설정 파일 : /etc/docker/daemon.json 데이터 저장 위치 변경 default : /var/lib/docker { &amp;#34;data-root&amp;#34;: &amp;#34;/home/docker&amp;#34;, } docker0 IP 변경 default : 172.17.0.1/255.255.0.0 가끔 호스트</description></item><item><title>Linux Kernel Tuning</title><link>https://hsyang.net/posts/linux-kernel-tuning/</link><pubDate>Mon, 07 Feb 2022 23:48:36 +0900</pubDate><guid>https://hsyang.net/posts/linux-kernel-tuning/</guid><description>개념 잡기 tcp receive window size 수신자가 한 번에 버퍼링할 수 있는 최대 데이터 크기(bytes) 송신자는 수신자의 window size만큼 ACK를 기다리지 않고 데이터 송신 가능 ack 를</description></item><item><title>[명령어] rpm</title><link>https://hsyang.net/posts/rpm/</link><pubDate>Mon, 24 Jan 2022 22:49:28 +0900</pubDate><guid>https://hsyang.net/posts/rpm/</guid><description>모든 옵션에 -p 를 붙여서 아직 설치되지 않는 rpm 파일에 대한 정보를 알 수 있다. 예를 들면 이런 식이다. ~$ rpm -ql docker-ce ~$ rpm -qlp docker-ce-20.10.12-3.el7.x86_64.rpm ~$ rpm -qi docker-ce ~$ rpm -qip docker-ce-20.10.12-3.el7.x86_64.rpm rpm 설치 ~$ rpm -ivh docker-ce-20.10.12-3.el7.x86_64.rpm rpm 버전 업그</description></item><item><title>Nginx docker container 안전하게 실행하기(security)</title><link>https://hsyang.net/posts/docker-security-nginx/</link><pubDate>Tue, 18 Jan 2022 00:16:14 +0900</pubDate><guid>https://hsyang.net/posts/docker-security-nginx/</guid><description>목표 Rootless mode Read only file system Linux Capabilities https://man7.org/linux/man-pages/man7/capabilities.7.html 설정 파일 준비 nginx.conf worker_processes 1; error_log /dev/stderr warn; pid /tmp/nginx.pid; events { worker_connections 1024; } http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format main &amp;#39;$remote_addr $status $request_time &amp;#34;$request&amp;#34; &amp;#39; &amp;#39;$body_bytes_sent &amp;#34;$http_referer&amp;#34; &amp;#39; &amp;#39;&amp;#34;$http_user_agent&amp;#34; &amp;#34;$http_x_forwarded_for&amp;#34;&amp;#39;; access_log /dev/stdout main; sendfile on; keepalive_timeout 65; error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413</description></item><item><title>[명령어] iptables</title><link>https://hsyang.net/posts/iptables/</link><pubDate>Mon, 10 Jan 2022 23:27:03 +0900</pubDate><guid>https://hsyang.net/posts/iptables/</guid><description>기본 개념 순서대로 규칙이 적용되기 때문에 설정 순서가 중요하다. 기본적으로 INPUT, OUTPUT, FORWAD Chain이 존재한다. 각 Chain에 대한 기본 정책 설정 ~$ sudo iptables -P INPUT DROP ~$ sudo</description></item><item><title>[명령어] dcmdump</title><link>https://hsyang.net/posts/cli-dcmdump/</link><pubDate>Wed, 29 Dec 2021 01:17:41 +0900</pubDate><guid>https://hsyang.net/posts/cli-dcmdump/</guid><description>DCMTK 버전: 3.6.5 DICOM 파일명 : sample.dcm 모든 태그 출력 ~$ dcmdump sample.dcm # Dicom-File-Format # Dicom-Meta-Information-Header # Used TransferSyntax: Little Endian Explicit (0002,0000) UL 216 # 4, 1 FileMetaInformationGroupLength (0002,0001) OB 00\01 # 2, 1 FileMetaInformationVersion (0002,0002) UI =BreastTomosynthesisImageStorage # 30, 1 MediaStorageSOPClassUID (0002,0003) UI [1.2.840.113845.13.6533.1581875921.128629056237121] # 50, 1 MediaStorageSOPInstanceUID (0002,0010) UI =JPEGLossless:Non-hierarchical-1stOrderPrediction # 22, 1 TransferSyntaxUID (0002,0012) UI [1.2.276.0.7230010.3.0.3.6.5] # 28,</description></item><item><title>CentOS 7 HA 클러스터 생성 방법(pacemaker, drbd, docker-compose)</title><link>https://hsyang.net/posts/how-to-create-ha-cluster-with-pacemaker-and-drbd-and-docker-compose/</link><pubDate>Tue, 21 Dec 2021 01:04:35 +0900</pubDate><guid>https://hsyang.net/posts/how-to-create-ha-cluster-with-pacemaker-and-drbd-and-docker-compose/</guid><description>이 글에서는 docker-compose로 실행하는 application을 Active/Standy HA 클러스터로 구성하는 방법에 대해 설명한다. 환경 구성 목표 OS : CentOS 7 두 대의</description></item><item><title>[명령어] xxd (파일 hex/binary view)</title><link>https://hsyang.net/posts/xxd/</link><pubDate>Sun, 12 Dec 2021 22:44:32 +0900</pubDate><guid>https://hsyang.net/posts/xxd/</guid><description>xxd는 파일의 내용을 컴퓨터에 저장된, 있는 그대로의 데이터를 보여주는 명령어다. 이 글에서는 centos 설치 후 생성되는 파일을 예제로 사용했다. (/root/anaconda-ks.cfg) 출력 No option ~$ xxd /root/anaconda-ks.cfg |</description></item><item><title>Docker ps 내용 바꾸기</title><link>https://hsyang.net/posts/docker-ps-format/</link><pubDate>Thu, 02 Dec 2021 10:05:12 +0900</pubDate><guid>https://hsyang.net/posts/docker-ps-format/</guid><description>내 이야기 docker ps 실행 시 기본으로 출력되는 항목은 다음과 같다. 그러나, 이미지 이름이 길거나 container 이름이 길거나 터미널 가로 크기가 좁거나 등등 다양한 이유로 위와 같이 줄</description></item><item><title>[명령어] git branch</title><link>https://hsyang.net/posts/git-branch/</link><pubDate>Mon, 29 Nov 2021 23:22:06 +0900</pubDate><guid>https://hsyang.net/posts/git-branch/</guid><description>생성 현재 commit에서 branch 생성 ~$ git checkout -b &amp;lt;new branch&amp;gt; # 예제 # branch 이름 : my-branch ~$ git checkout -b my-branch 특정 tag에서 branch 생성 ~$ git checkout -b &amp;lt;new branch&amp;gt; &amp;lt;tag&amp;gt; # 예제 # branch 이름 : my-branch # tag : 1.1.0 ~$ git checkout -b my-branch</description></item><item><title>DICOM 영상에서 Window Center와 Window Width는 대체 왜 쓰는걸까?</title><link>https://hsyang.net/posts/dicom-windowing/</link><pubDate>Tue, 23 Nov 2021 02:30:16 +0900</pubDate><guid>https://hsyang.net/posts/dicom-windowing/</guid><description>이 글의 내용을 이해하기 위해서는 이미지의 픽셀에 대한 개념과 픽셀이 숫자로 표현된다는 것을 알고 있어야 한다. 만약 잘 모르겠다면 이 글을(컴퓨터는 어떻게 이미지를</description></item><item><title>스마트폰 앱은 어떻게 이미지를 보정하는 걸까?</title><link>https://hsyang.net/posts/how-smartphone-apps-edit-photos/</link><pubDate>Mon, 15 Nov 2021 15:37:16 +0900</pubDate><guid>https://hsyang.net/posts/how-smartphone-apps-edit-photos/</guid><description>이미지 보정 스마트폰이 필수 아이템으로 자리잡은 요즘, 스마트폰을 이용한 사진 촬영과 보정은 매우 흔한 일상이 되었다. 터치 몇 번으로 보정할 수 있는 앱들도 많이 사용</description></item><item><title>컴퓨터는 이미지를 어떻게 저장하고 표현할까?</title><link>https://hsyang.net/posts/how-are-images-stored-and-displayed-on-a-computer/</link><pubDate>Mon, 01 Nov 2021 00:02:16 +0900</pubDate><guid>https://hsyang.net/posts/how-are-images-stored-and-displayed-on-a-computer/</guid><description>이미지 들여다보기 멋드러지게 사진을 찍고 있는 한 남자의 흑백 사진(이미지)를 보자. 그냥 딱 흑백 사진이다. 이상해 보이지 않는다. 이 이미지를 확대해보자. 약간</description></item><item><title>AWS CLI [EC2] - 생성하기</title><link>https://hsyang.net/posts/aws-cli-ec2/</link><pubDate>Mon, 11 Oct 2021 11:58:00 +0900</pubDate><guid>https://hsyang.net/posts/aws-cli-ec2/</guid><description>EC2 란? AWS를 처음 사용할 때 가장 쉽게 접할 수 있는 서비스가 EC2다. 일반 서버를 다루는 것과 비슷하다. 물리적인 하드웨어 구입 없이, AWS 상에 가상의 서버를 만드</description></item><item><title>AWS CLI - 설치 및 기본 설정 방법</title><link>https://hsyang.net/posts/aws-cli-configure/</link><pubDate>Sun, 19 Sep 2021 16:00:27 +0900</pubDate><guid>https://hsyang.net/posts/aws-cli-configure/</guid><description>Why CLI? CLI : Command Line Interface의 약자로 명령어 기반의 사용자 환경을 의미한다. 처음 AWS를 접할 때는 GUI 환경인 AWS Management Console을 이용하는게 좀 더 직관적</description></item><item><title>윈도우에서 DLL 파일을 찾을 수 없는 오류 해결 방법 (msvcp.dll, msvcr.dll 등등)</title><link>https://hsyang.net/posts/how-to-fix-dll-file-not-found/</link><pubDate>Sat, 11 Sep 2021 15:12:26 +0900</pubDate><guid>https://hsyang.net/posts/how-to-fix-dll-file-not-found/</guid><description>문제 Windows 10에서 프로그램 실행 시 특정 dll 파일이 없다는 오류 환경 Windows 10 해결방법 해당 dll 파일들은 MS에서 배포하는 재배포 가능 패키지를 설치하면 해결된다. 에러 메시</description></item><item><title>[Python] Requests 라이브러리의 Connection Timeout에 관하여</title><link>https://hsyang.net/posts/python-requests-library-timeout/</link><pubDate>Sat, 28 Aug 2021 21:26:04 +0900</pubDate><guid>https://hsyang.net/posts/python-requests-library-timeout/</guid><description>내가 겪은 이야기 실무에서 Requests 라이브러리는 꽤 자주 사용하는 편인데 얼마전 겪었던 다소 황당했던(?) 일을 얘기해보려 한다. Production 환경에서는 네트워크 통신 시 항상 Timeout 관</description></item><item><title>[명령어] tcpdump</title><link>https://hsyang.net/posts/tcpdump/</link><pubDate>Mon, 23 Aug 2021 18:21:37 +0900</pubDate><guid>https://hsyang.net/posts/tcpdump/</guid><description>tcpdump는 네트워크 패킷을 캡쳐할 수 있는 명령어로 여러가지 상황에서 활용할 수 있다. HTTP API 통신하는 app이 실제로 어떤 내용을 주고 받는지 확인하고 싶을 때</description></item><item><title>[Python] AWS EC2 정보를 Google Spreadsheets 문서에 정리하기</title><link>https://hsyang.net/posts/python-google-spreadsheets/</link><pubDate>Tue, 17 Aug 2021 00:01:00 +0900</pubDate><guid>https://hsyang.net/posts/python-google-spreadsheets/</guid><description>서론 사용 중인 AWS EC2 리소스에 대해 엑셀 문서로 정리해서 보안팀에 제출해야 하는 일이 생겼다. 1년에 한번씩 보안 심사를 받는데, 그 때마다 같은 일을 계속해야 하는 귀찮</description></item><item><title>[Python] MS Word 파일 수정하기</title><link>https://hsyang.net/posts/python-docx/</link><pubDate>Sat, 07 Aug 2021 22:11:17 +0900</pubDate><guid>https://hsyang.net/posts/python-docx/</guid><description>python 코드로 MS Word 문서를 편집할 때 사용할 수 있는 라이브러리를 소개하고자 한다. python-docx docxtpl python-docx은 코드로 직접 문서를 작성하는데 초점이 맞춰져 있는 반면</description></item><item><title>소스코드 내에(텍스트 파일) vim 옵션 설정하기</title><link>https://hsyang.net/posts/vim-modeline/</link><pubDate>Sun, 18 Apr 2021 00:51:17 +0900</pubDate><guid>https://hsyang.net/posts/vim-modeline/</guid><description>가끔 원격 서버에서 vim으로 파일을 편집해야 할 때가 있다. 원격 서버는 개인용이 아니므로 보통 ~/.vimrc 설정이 없다. 이 경우 vim으로 파일을 열어 tab키를 누르면 8</description></item><item><title>[명령어] git commit</title><link>https://hsyang.net/posts/git-commit/</link><pubDate>Sun, 15 Nov 2020 23:18:21 +0900</pubDate><guid>https://hsyang.net/posts/git-commit/</guid><description>commit 취소 # 최종 커밋을 취소. 워킹트리는 보존됨. (커밋은 했으나 push하지 않은 경우 사용) ~$ git reset HEAD^ # 마지막 2개의 커밋을 취소. 워킹트리는 보존됨. ~$ git reset</description></item><item><title>[명령어] git tag</title><link>https://hsyang.net/posts/git-tag/</link><pubDate>Sat, 14 Nov 2020 16:39:51 +0900</pubDate><guid>https://hsyang.net/posts/git-tag/</guid><description>tag 추가 # 가장 최신 커밋에 Tag 추가 ~$ git tag v1.5.1.2 # 특정 커밋에 Tag 추가 ~$ git tag v1.5.1.2 446e2c10555ccbaa5cd4006b250d7d2135dbc2b0 tag 삭제 # 로컬 Repo에서 삭제 ~$ git tag -d 1.7.2 # 원격 Repo에서 삭제 ~$ git push origin :tags/1.7.2 tag 덮어</description></item><item><title>[명령어] git submodule</title><link>https://hsyang.net/posts/git-submodule/</link><pubDate>Sat, 14 Nov 2020 16:27:53 +0900</pubDate><guid>https://hsyang.net/posts/git-submodule/</guid><description>submodule 추가 # submodule 목록 보기 ~$ git submodule # submodule 추가 ~$ git submodule add &amp;lt;remote repository&amp;gt; &amp;lt;local dir&amp;gt; submodule 업데이트 # git 버전 1.8 이전 ~$ cd project # git repository ~$ cd sub1 # assume sub1 is submodule ~$ git pull # get latest sub1 ~$ cd .. ~$ git add sub1 ~$ git commit -m &amp;#39;update submodule&amp;#39;</description></item></channel></rss>